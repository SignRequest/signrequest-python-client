# coding: utf-8

"""
    SignRequest API

    API for SignRequest.com

    OpenAPI spec version: v1
    Contact: tech-support@signrequest.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from signrequest_client.api_client import ApiClient


class EventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def events_list(self, **kwargs):  # noqa: E501
        """Retrieve a list of Events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.events_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param str document__uuid: 
        :param str document__external_id: 
        :param str document__signrequest__who: 
        :param str document__signrequest__from_email: 
        :param str document__status: 
        :param str document__user__email: 
        :param str document__user__first_name: 
        :param str document__user__last_name: 
        :param str delivered: 
        :param str delivered_on: 
        :param str timestamp: 
        :param str status: 
        :param str event_type: 
        :param int page: A page number within the paginated result set.
        :param int limit: Number of results to return per page.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.events_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.events_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def events_list_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of Events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.events_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str document__uuid: 
        :param str document__external_id: 
        :param str document__signrequest__who: 
        :param str document__signrequest__from_email: 
        :param str document__status: 
        :param str document__user__email: 
        :param str document__user__first_name: 
        :param str document__user__last_name: 
        :param str delivered: 
        :param str delivered_on: 
        :param str timestamp: 
        :param str status: 
        :param str event_type: 
        :param int page: A page number within the paginated result set.
        :param int limit: Number of results to return per page.
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document__uuid', 'document__external_id', 'document__signrequest__who', 'document__signrequest__from_email', 'document__status', 'document__user__email', 'document__user__first_name', 'document__user__last_name', 'delivered', 'delivered_on', 'timestamp', 'status', 'event_type', 'page', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'document__uuid' in params:
            query_params.append(('document__uuid', params['document__uuid']))  # noqa: E501
        if 'document__external_id' in params:
            query_params.append(('document__external_id', params['document__external_id']))  # noqa: E501
        if 'document__signrequest__who' in params:
            query_params.append(('document__signrequest__who', params['document__signrequest__who']))  # noqa: E501
        if 'document__signrequest__from_email' in params:
            query_params.append(('document__signrequest__from_email', params['document__signrequest__from_email']))  # noqa: E501
        if 'document__status' in params:
            query_params.append(('document__status', params['document__status']))  # noqa: E501
        if 'document__user__email' in params:
            query_params.append(('document__user__email', params['document__user__email']))  # noqa: E501
        if 'document__user__first_name' in params:
            query_params.append(('document__user__first_name', params['document__user__first_name']))  # noqa: E501
        if 'document__user__last_name' in params:
            query_params.append(('document__user__last_name', params['document__user__last_name']))  # noqa: E501
        if 'delivered' in params:
            query_params.append(('delivered', params['delivered']))  # noqa: E501
        if 'delivered_on' in params:
            query_params.append(('delivered_on', params['delivered_on']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'event_type' in params:
            query_params.append(('event_type', params['event_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/events/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def events_read(self, id, **kwargs):  # noqa: E501
        """Retrieve an Event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.events_read(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: A unique integer value identifying this event. (required)
        :return: Event
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.events_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.events_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def events_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve an Event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.events_read_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int id: A unique integer value identifying this event. (required)
        :return: Event
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `events_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/events/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Event',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
