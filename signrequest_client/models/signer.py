# coding: utf-8

"""
    SignRequest API

    API for SignRequest.com

    OpenAPI spec version: v1
    Contact: tech-support@signrequest.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Signer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'display_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email_viewed': 'bool',
        'viewed': 'bool',
        'signed': 'bool',
        'downloaded': 'bool',
        'signed_on': 'datetime',
        'needs_to_sign': 'bool',
        'approve_only': 'bool',
        'notify_only': 'bool',
        'in_person': 'bool',
        'order': 'int',
        'language': 'str',
        'force_language': 'bool',
        'emailed': 'bool',
        'verify_phone_number': 'str',
        'verify_bank_account': 'str',
        'declined': 'bool',
        'declined_on': 'datetime',
        'forwarded': 'str',
        'forwarded_on': 'datetime',
        'forwarded_to_email': 'str',
        'forwarded_reason': 'str',
        'message': 'str',
        'embed_url_user_id': 'str',
        'inputs': 'list[SignerInputs]',
        'use_stamp_for_approve_only': 'bool',
        'embed_url': 'str',
        'attachments': 'list[SignerAttachment]',
        'redirect_url': 'str',
        'redirect_url_declined': 'str',
        'after_document': 'str',
        'integrations': 'list[InlineDocumentSignerIntegrationData]',
        'password': 'str'
    }

    attribute_map = {
        'email': 'email',
        'display_name': 'display_name',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email_viewed': 'email_viewed',
        'viewed': 'viewed',
        'signed': 'signed',
        'downloaded': 'downloaded',
        'signed_on': 'signed_on',
        'needs_to_sign': 'needs_to_sign',
        'approve_only': 'approve_only',
        'notify_only': 'notify_only',
        'in_person': 'in_person',
        'order': 'order',
        'language': 'language',
        'force_language': 'force_language',
        'emailed': 'emailed',
        'verify_phone_number': 'verify_phone_number',
        'verify_bank_account': 'verify_bank_account',
        'declined': 'declined',
        'declined_on': 'declined_on',
        'forwarded': 'forwarded',
        'forwarded_on': 'forwarded_on',
        'forwarded_to_email': 'forwarded_to_email',
        'forwarded_reason': 'forwarded_reason',
        'message': 'message',
        'embed_url_user_id': 'embed_url_user_id',
        'inputs': 'inputs',
        'use_stamp_for_approve_only': 'use_stamp_for_approve_only',
        'embed_url': 'embed_url',
        'attachments': 'attachments',
        'redirect_url': 'redirect_url',
        'redirect_url_declined': 'redirect_url_declined',
        'after_document': 'after_document',
        'integrations': 'integrations',
        'password': 'password'
    }

    def __init__(self, email=None, display_name=None, first_name=None, last_name=None, email_viewed=None, viewed=None, signed=None, downloaded=None, signed_on=None, needs_to_sign=True, approve_only=None, notify_only=None, in_person=None, order=None, language=None, force_language=None, emailed=None, verify_phone_number=None, verify_bank_account=None, declined=None, declined_on=None, forwarded=None, forwarded_on=None, forwarded_to_email=None, forwarded_reason=None, message=None, embed_url_user_id=None, inputs=None, use_stamp_for_approve_only=None, embed_url=None, attachments=None, redirect_url=None, redirect_url_declined=None, after_document=None, integrations=None, password=None):  # noqa: E501
        """Signer - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._display_name = None
        self._first_name = None
        self._last_name = None
        self._email_viewed = None
        self._viewed = None
        self._signed = None
        self._downloaded = None
        self._signed_on = None
        self._needs_to_sign = None
        self._approve_only = None
        self._notify_only = None
        self._in_person = None
        self._order = None
        self._language = None
        self._force_language = None
        self._emailed = None
        self._verify_phone_number = None
        self._verify_bank_account = None
        self._declined = None
        self._declined_on = None
        self._forwarded = None
        self._forwarded_on = None
        self._forwarded_to_email = None
        self._forwarded_reason = None
        self._message = None
        self._embed_url_user_id = None
        self._inputs = None
        self._use_stamp_for_approve_only = None
        self._embed_url = None
        self._attachments = None
        self._redirect_url = None
        self._redirect_url_declined = None
        self._after_document = None
        self._integrations = None
        self._password = None
        self.discriminator = None

        self.email = email
        if display_name is not None:
            self.display_name = display_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email_viewed is not None:
            self.email_viewed = email_viewed
        if viewed is not None:
            self.viewed = viewed
        if signed is not None:
            self.signed = signed
        if downloaded is not None:
            self.downloaded = downloaded
        if signed_on is not None:
            self.signed_on = signed_on
        if needs_to_sign is not None:
            self.needs_to_sign = needs_to_sign
        if approve_only is not None:
            self.approve_only = approve_only
        if notify_only is not None:
            self.notify_only = notify_only
        if in_person is not None:
            self.in_person = in_person
        if order is not None:
            self.order = order
        if language is not None:
            self.language = language
        if force_language is not None:
            self.force_language = force_language
        if emailed is not None:
            self.emailed = emailed
        if verify_phone_number is not None:
            self.verify_phone_number = verify_phone_number
        if verify_bank_account is not None:
            self.verify_bank_account = verify_bank_account
        if declined is not None:
            self.declined = declined
        if declined_on is not None:
            self.declined_on = declined_on
        if forwarded is not None:
            self.forwarded = forwarded
        if forwarded_on is not None:
            self.forwarded_on = forwarded_on
        if forwarded_to_email is not None:
            self.forwarded_to_email = forwarded_to_email
        if forwarded_reason is not None:
            self.forwarded_reason = forwarded_reason
        if message is not None:
            self.message = message
        if embed_url_user_id is not None:
            self.embed_url_user_id = embed_url_user_id
        if inputs is not None:
            self.inputs = inputs
        if use_stamp_for_approve_only is not None:
            self.use_stamp_for_approve_only = use_stamp_for_approve_only
        if embed_url is not None:
            self.embed_url = embed_url
        if attachments is not None:
            self.attachments = attachments
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if redirect_url_declined is not None:
            self.redirect_url_declined = redirect_url_declined
        if after_document is not None:
            self.after_document = after_document
        if integrations is not None:
            self.integrations = integrations
        if password is not None:
            self.password = password

    @property
    def email(self):
        """Gets the email of this Signer.  # noqa: E501


        :return: The email of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Signer.


        :param email: The email of this Signer.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) > 255:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `255`")  # noqa: E501
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def display_name(self):
        """Gets the display_name of this Signer.  # noqa: E501


        :return: The display_name of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Signer.


        :param display_name: The display_name of this Signer.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def first_name(self):
        """Gets the first_name of this Signer.  # noqa: E501


        :return: The first_name of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Signer.


        :param first_name: The first_name of this Signer.  # noqa: E501
        :type: str
        """
        if first_name is not None and len(first_name) > 255:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `255`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Signer.  # noqa: E501


        :return: The last_name of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Signer.


        :param last_name: The last_name of this Signer.  # noqa: E501
        :type: str
        """
        if last_name is not None and len(last_name) > 255:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `255`")  # noqa: E501

        self._last_name = last_name

    @property
    def email_viewed(self):
        """Gets the email_viewed of this Signer.  # noqa: E501


        :return: The email_viewed of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._email_viewed

    @email_viewed.setter
    def email_viewed(self, email_viewed):
        """Sets the email_viewed of this Signer.


        :param email_viewed: The email_viewed of this Signer.  # noqa: E501
        :type: bool
        """

        self._email_viewed = email_viewed

    @property
    def viewed(self):
        """Gets the viewed of this Signer.  # noqa: E501


        :return: The viewed of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._viewed

    @viewed.setter
    def viewed(self, viewed):
        """Sets the viewed of this Signer.


        :param viewed: The viewed of this Signer.  # noqa: E501
        :type: bool
        """

        self._viewed = viewed

    @property
    def signed(self):
        """Gets the signed of this Signer.  # noqa: E501


        :return: The signed of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._signed

    @signed.setter
    def signed(self, signed):
        """Sets the signed of this Signer.


        :param signed: The signed of this Signer.  # noqa: E501
        :type: bool
        """

        self._signed = signed

    @property
    def downloaded(self):
        """Gets the downloaded of this Signer.  # noqa: E501


        :return: The downloaded of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._downloaded

    @downloaded.setter
    def downloaded(self, downloaded):
        """Sets the downloaded of this Signer.


        :param downloaded: The downloaded of this Signer.  # noqa: E501
        :type: bool
        """

        self._downloaded = downloaded

    @property
    def signed_on(self):
        """Gets the signed_on of this Signer.  # noqa: E501


        :return: The signed_on of this Signer.  # noqa: E501
        :rtype: datetime
        """
        return self._signed_on

    @signed_on.setter
    def signed_on(self, signed_on):
        """Sets the signed_on of this Signer.


        :param signed_on: The signed_on of this Signer.  # noqa: E501
        :type: datetime
        """

        self._signed_on = signed_on

    @property
    def needs_to_sign(self):
        """Gets the needs_to_sign of this Signer.  # noqa: E501

        When `false` user does not need to sign, but will receive a copy of the signed document and signing log, see: [Copy only](#section/Additional-signing-methods/Copy-only)  # noqa: E501

        :return: The needs_to_sign of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._needs_to_sign

    @needs_to_sign.setter
    def needs_to_sign(self, needs_to_sign):
        """Sets the needs_to_sign of this Signer.

        When `false` user does not need to sign, but will receive a copy of the signed document and signing log, see: [Copy only](#section/Additional-signing-methods/Copy-only)  # noqa: E501

        :param needs_to_sign: The needs_to_sign of this Signer.  # noqa: E501
        :type: bool
        """

        self._needs_to_sign = needs_to_sign

    @property
    def approve_only(self):
        """Gets the approve_only of this Signer.  # noqa: E501

        Require user to approve the document (without adding a signature), see: [Approve only](#section/Additional-signing-methods/Approve-only)  # noqa: E501

        :return: The approve_only of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._approve_only

    @approve_only.setter
    def approve_only(self, approve_only):
        """Sets the approve_only of this Signer.

        Require user to approve the document (without adding a signature), see: [Approve only](#section/Additional-signing-methods/Approve-only)  # noqa: E501

        :param approve_only: The approve_only of this Signer.  # noqa: E501
        :type: bool
        """

        self._approve_only = approve_only

    @property
    def notify_only(self):
        """Gets the notify_only of this Signer.  # noqa: E501

        Send notifications about the document and a copy of the signed document and signing log, but don't require them to take any action, see: [Notify only](#section/Additional-signing-methods/Notify-only)  # noqa: E501

        :return: The notify_only of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._notify_only

    @notify_only.setter
    def notify_only(self, notify_only):
        """Sets the notify_only of this Signer.

        Send notifications about the document and a copy of the signed document and signing log, but don't require them to take any action, see: [Notify only](#section/Additional-signing-methods/Notify-only)  # noqa: E501

        :param notify_only: The notify_only of this Signer.  # noqa: E501
        :type: bool
        """

        self._notify_only = notify_only

    @property
    def in_person(self):
        """Gets the in_person of this Signer.  # noqa: E501

        When used in combination with an embed url on the sender, after sender has signed, they will be redirected to the next `in_person` signer, see: [In person signing](#section/Additional-signing-methods/In-person-signing)  # noqa: E501

        :return: The in_person of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._in_person

    @in_person.setter
    def in_person(self, in_person):
        """Sets the in_person of this Signer.

        When used in combination with an embed url on the sender, after sender has signed, they will be redirected to the next `in_person` signer, see: [In person signing](#section/Additional-signing-methods/In-person-signing)  # noqa: E501

        :param in_person: The in_person of this Signer.  # noqa: E501
        :type: bool
        """

        self._in_person = in_person

    @property
    def order(self):
        """Gets the order of this Signer.  # noqa: E501


        :return: The order of this Signer.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Signer.


        :param order: The order of this Signer.  # noqa: E501
        :type: int
        """
        if order is not None and order > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if order is not None and order < 0:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._order = order

    @property
    def language(self):
        """Gets the language of this Signer.  # noqa: E501


        :return: The language of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Signer.


        :param language: The language of this Signer.  # noqa: E501
        :type: str
        """
        allowed_values = ["en", "en-gb", "nl", "fr", "de", "he", "da", "fi", "hu", "it", "no", "pl", "pt", "es", "sv", "ru"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def force_language(self):
        """Gets the force_language of this Signer.  # noqa: E501


        :return: The force_language of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._force_language

    @force_language.setter
    def force_language(self, force_language):
        """Sets the force_language of this Signer.


        :param force_language: The force_language of this Signer.  # noqa: E501
        :type: bool
        """

        self._force_language = force_language

    @property
    def emailed(self):
        """Gets the emailed of this Signer.  # noqa: E501


        :return: The emailed of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._emailed

    @emailed.setter
    def emailed(self, emailed):
        """Sets the emailed of this Signer.


        :param emailed: The emailed of this Signer.  # noqa: E501
        :type: bool
        """

        self._emailed = emailed

    @property
    def verify_phone_number(self):
        """Gets the verify_phone_number of this Signer.  # noqa: E501


        :return: The verify_phone_number of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._verify_phone_number

    @verify_phone_number.setter
    def verify_phone_number(self, verify_phone_number):
        """Sets the verify_phone_number of this Signer.


        :param verify_phone_number: The verify_phone_number of this Signer.  # noqa: E501
        :type: str
        """
        if verify_phone_number is not None and len(verify_phone_number) > 255:
            raise ValueError("Invalid value for `verify_phone_number`, length must be less than or equal to `255`")  # noqa: E501

        self._verify_phone_number = verify_phone_number

    @property
    def verify_bank_account(self):
        """Gets the verify_bank_account of this Signer.  # noqa: E501


        :return: The verify_bank_account of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._verify_bank_account

    @verify_bank_account.setter
    def verify_bank_account(self, verify_bank_account):
        """Sets the verify_bank_account of this Signer.


        :param verify_bank_account: The verify_bank_account of this Signer.  # noqa: E501
        :type: str
        """
        if verify_bank_account is not None and len(verify_bank_account) > 255:
            raise ValueError("Invalid value for `verify_bank_account`, length must be less than or equal to `255`")  # noqa: E501

        self._verify_bank_account = verify_bank_account

    @property
    def declined(self):
        """Gets the declined of this Signer.  # noqa: E501


        :return: The declined of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._declined

    @declined.setter
    def declined(self, declined):
        """Sets the declined of this Signer.


        :param declined: The declined of this Signer.  # noqa: E501
        :type: bool
        """

        self._declined = declined

    @property
    def declined_on(self):
        """Gets the declined_on of this Signer.  # noqa: E501


        :return: The declined_on of this Signer.  # noqa: E501
        :rtype: datetime
        """
        return self._declined_on

    @declined_on.setter
    def declined_on(self, declined_on):
        """Sets the declined_on of this Signer.


        :param declined_on: The declined_on of this Signer.  # noqa: E501
        :type: datetime
        """

        self._declined_on = declined_on

    @property
    def forwarded(self):
        """Gets the forwarded of this Signer.  # noqa: E501


        :return: The forwarded of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._forwarded

    @forwarded.setter
    def forwarded(self, forwarded):
        """Sets the forwarded of this Signer.


        :param forwarded: The forwarded of this Signer.  # noqa: E501
        :type: str
        """

        self._forwarded = forwarded

    @property
    def forwarded_on(self):
        """Gets the forwarded_on of this Signer.  # noqa: E501


        :return: The forwarded_on of this Signer.  # noqa: E501
        :rtype: datetime
        """
        return self._forwarded_on

    @forwarded_on.setter
    def forwarded_on(self, forwarded_on):
        """Sets the forwarded_on of this Signer.


        :param forwarded_on: The forwarded_on of this Signer.  # noqa: E501
        :type: datetime
        """

        self._forwarded_on = forwarded_on

    @property
    def forwarded_to_email(self):
        """Gets the forwarded_to_email of this Signer.  # noqa: E501


        :return: The forwarded_to_email of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._forwarded_to_email

    @forwarded_to_email.setter
    def forwarded_to_email(self, forwarded_to_email):
        """Sets the forwarded_to_email of this Signer.


        :param forwarded_to_email: The forwarded_to_email of this Signer.  # noqa: E501
        :type: str
        """
        if forwarded_to_email is not None and len(forwarded_to_email) < 1:
            raise ValueError("Invalid value for `forwarded_to_email`, length must be greater than or equal to `1`")  # noqa: E501

        self._forwarded_to_email = forwarded_to_email

    @property
    def forwarded_reason(self):
        """Gets the forwarded_reason of this Signer.  # noqa: E501


        :return: The forwarded_reason of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._forwarded_reason

    @forwarded_reason.setter
    def forwarded_reason(self, forwarded_reason):
        """Sets the forwarded_reason of this Signer.


        :param forwarded_reason: The forwarded_reason of this Signer.  # noqa: E501
        :type: str
        """
        if forwarded_reason is not None and len(forwarded_reason) < 1:
            raise ValueError("Invalid value for `forwarded_reason`, length must be greater than or equal to `1`")  # noqa: E501

        self._forwarded_reason = forwarded_reason

    @property
    def message(self):
        """Gets the message of this Signer.  # noqa: E501


        :return: The message of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Signer.


        :param message: The message of this Signer.  # noqa: E501
        :type: str
        """
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")  # noqa: E501

        self._message = message

    @property
    def embed_url_user_id(self):
        """Gets the embed_url_user_id of this Signer.  # noqa: E501


        :return: The embed_url_user_id of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._embed_url_user_id

    @embed_url_user_id.setter
    def embed_url_user_id(self, embed_url_user_id):
        """Sets the embed_url_user_id of this Signer.


        :param embed_url_user_id: The embed_url_user_id of this Signer.  # noqa: E501
        :type: str
        """
        if embed_url_user_id is not None and len(embed_url_user_id) > 255:
            raise ValueError("Invalid value for `embed_url_user_id`, length must be less than or equal to `255`")  # noqa: E501

        self._embed_url_user_id = embed_url_user_id

    @property
    def inputs(self):
        """Gets the inputs of this Signer.  # noqa: E501


        :return: The inputs of this Signer.  # noqa: E501
        :rtype: list[SignerInputs]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this Signer.


        :param inputs: The inputs of this Signer.  # noqa: E501
        :type: list[SignerInputs]
        """

        self._inputs = inputs

    @property
    def use_stamp_for_approve_only(self):
        """Gets the use_stamp_for_approve_only of this Signer.  # noqa: E501

        Place an approval stamp on a document when a signer approves a document  # noqa: E501

        :return: The use_stamp_for_approve_only of this Signer.  # noqa: E501
        :rtype: bool
        """
        return self._use_stamp_for_approve_only

    @use_stamp_for_approve_only.setter
    def use_stamp_for_approve_only(self, use_stamp_for_approve_only):
        """Sets the use_stamp_for_approve_only of this Signer.

        Place an approval stamp on a document when a signer approves a document  # noqa: E501

        :param use_stamp_for_approve_only: The use_stamp_for_approve_only of this Signer.  # noqa: E501
        :type: bool
        """

        self._use_stamp_for_approve_only = use_stamp_for_approve_only

    @property
    def embed_url(self):
        """Gets the embed_url of this Signer.  # noqa: E501


        :return: The embed_url of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._embed_url

    @embed_url.setter
    def embed_url(self, embed_url):
        """Sets the embed_url of this Signer.


        :param embed_url: The embed_url of this Signer.  # noqa: E501
        :type: str
        """
        if embed_url is not None and len(embed_url) < 1:
            raise ValueError("Invalid value for `embed_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._embed_url = embed_url

    @property
    def attachments(self):
        """Gets the attachments of this Signer.  # noqa: E501


        :return: The attachments of this Signer.  # noqa: E501
        :rtype: list[SignerAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Signer.


        :param attachments: The attachments of this Signer.  # noqa: E501
        :type: list[SignerAttachment]
        """

        self._attachments = attachments

    @property
    def redirect_url(self):
        """Gets the redirect_url of this Signer.  # noqa: E501


        :return: The redirect_url of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this Signer.


        :param redirect_url: The redirect_url of this Signer.  # noqa: E501
        :type: str
        """
        if redirect_url is not None and len(redirect_url) > 2100:
            raise ValueError("Invalid value for `redirect_url`, length must be less than or equal to `2100`")  # noqa: E501

        self._redirect_url = redirect_url

    @property
    def redirect_url_declined(self):
        """Gets the redirect_url_declined of this Signer.  # noqa: E501


        :return: The redirect_url_declined of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url_declined

    @redirect_url_declined.setter
    def redirect_url_declined(self, redirect_url_declined):
        """Sets the redirect_url_declined of this Signer.


        :param redirect_url_declined: The redirect_url_declined of this Signer.  # noqa: E501
        :type: str
        """
        if redirect_url_declined is not None and len(redirect_url_declined) > 2100:
            raise ValueError("Invalid value for `redirect_url_declined`, length must be less than or equal to `2100`")  # noqa: E501

        self._redirect_url_declined = redirect_url_declined

    @property
    def after_document(self):
        """Gets the after_document of this Signer.  # noqa: E501


        :return: The after_document of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._after_document

    @after_document.setter
    def after_document(self, after_document):
        """Sets the after_document of this Signer.


        :param after_document: The after_document of this Signer.  # noqa: E501
        :type: str
        """

        self._after_document = after_document

    @property
    def integrations(self):
        """Gets the integrations of this Signer.  # noqa: E501


        :return: The integrations of this Signer.  # noqa: E501
        :rtype: list[InlineDocumentSignerIntegrationData]
        """
        return self._integrations

    @integrations.setter
    def integrations(self, integrations):
        """Sets the integrations of this Signer.


        :param integrations: The integrations of this Signer.  # noqa: E501
        :type: list[InlineDocumentSignerIntegrationData]
        """

        self._integrations = integrations

    @property
    def password(self):
        """Gets the password of this Signer.  # noqa: E501

        Require the signer to enter this password before signing a document. This field is write only.  # noqa: E501

        :return: The password of this Signer.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Signer.

        Require the signer to enter this password before signing a document. This field is write only.  # noqa: E501

        :param password: The password of this Signer.  # noqa: E501
        :type: str
        """
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")  # noqa: E501

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Signer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Signer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
