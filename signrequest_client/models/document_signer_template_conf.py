# coding: utf-8

"""
    SignRequest API

    API for SignRequest.com

    OpenAPI spec version: v1
    Contact: tech-support@signrequest.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signrequest_client.models.placeholder import Placeholder  # noqa: F401,E501


class DocumentSignerTemplateConf(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signer_index': 'int',
        'needs_to_sign': 'bool',
        'approve_only': 'bool',
        'notify_only': 'bool',
        'in_person': 'bool',
        'order': 'int',
        'placeholders': 'list[Placeholder]'
    }

    attribute_map = {
        'signer_index': 'signer_index',
        'needs_to_sign': 'needs_to_sign',
        'approve_only': 'approve_only',
        'notify_only': 'notify_only',
        'in_person': 'in_person',
        'order': 'order',
        'placeholders': 'placeholders'
    }

    def __init__(self, signer_index=None, needs_to_sign=None, approve_only=None, notify_only=None, in_person=None, order=None, placeholders=None):  # noqa: E501
        """DocumentSignerTemplateConf - a model defined in Swagger"""  # noqa: E501

        self._signer_index = None
        self._needs_to_sign = None
        self._approve_only = None
        self._notify_only = None
        self._in_person = None
        self._order = None
        self._placeholders = None
        self.discriminator = None

        if signer_index is not None:
            self.signer_index = signer_index
        if needs_to_sign is not None:
            self.needs_to_sign = needs_to_sign
        if approve_only is not None:
            self.approve_only = approve_only
        if notify_only is not None:
            self.notify_only = notify_only
        if in_person is not None:
            self.in_person = in_person
        if order is not None:
            self.order = order
        if placeholders is not None:
            self.placeholders = placeholders

    @property
    def signer_index(self):
        """Gets the signer_index of this DocumentSignerTemplateConf.  # noqa: E501


        :return: The signer_index of this DocumentSignerTemplateConf.  # noqa: E501
        :rtype: int
        """
        return self._signer_index

    @signer_index.setter
    def signer_index(self, signer_index):
        """Sets the signer_index of this DocumentSignerTemplateConf.


        :param signer_index: The signer_index of this DocumentSignerTemplateConf.  # noqa: E501
        :type: int
        """
        if signer_index is not None and signer_index > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `signer_index`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if signer_index is not None and signer_index < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `signer_index`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._signer_index = signer_index

    @property
    def needs_to_sign(self):
        """Gets the needs_to_sign of this DocumentSignerTemplateConf.  # noqa: E501


        :return: The needs_to_sign of this DocumentSignerTemplateConf.  # noqa: E501
        :rtype: bool
        """
        return self._needs_to_sign

    @needs_to_sign.setter
    def needs_to_sign(self, needs_to_sign):
        """Sets the needs_to_sign of this DocumentSignerTemplateConf.


        :param needs_to_sign: The needs_to_sign of this DocumentSignerTemplateConf.  # noqa: E501
        :type: bool
        """

        self._needs_to_sign = needs_to_sign

    @property
    def approve_only(self):
        """Gets the approve_only of this DocumentSignerTemplateConf.  # noqa: E501


        :return: The approve_only of this DocumentSignerTemplateConf.  # noqa: E501
        :rtype: bool
        """
        return self._approve_only

    @approve_only.setter
    def approve_only(self, approve_only):
        """Sets the approve_only of this DocumentSignerTemplateConf.


        :param approve_only: The approve_only of this DocumentSignerTemplateConf.  # noqa: E501
        :type: bool
        """

        self._approve_only = approve_only

    @property
    def notify_only(self):
        """Gets the notify_only of this DocumentSignerTemplateConf.  # noqa: E501


        :return: The notify_only of this DocumentSignerTemplateConf.  # noqa: E501
        :rtype: bool
        """
        return self._notify_only

    @notify_only.setter
    def notify_only(self, notify_only):
        """Sets the notify_only of this DocumentSignerTemplateConf.


        :param notify_only: The notify_only of this DocumentSignerTemplateConf.  # noqa: E501
        :type: bool
        """

        self._notify_only = notify_only

    @property
    def in_person(self):
        """Gets the in_person of this DocumentSignerTemplateConf.  # noqa: E501


        :return: The in_person of this DocumentSignerTemplateConf.  # noqa: E501
        :rtype: bool
        """
        return self._in_person

    @in_person.setter
    def in_person(self, in_person):
        """Sets the in_person of this DocumentSignerTemplateConf.


        :param in_person: The in_person of this DocumentSignerTemplateConf.  # noqa: E501
        :type: bool
        """

        self._in_person = in_person

    @property
    def order(self):
        """Gets the order of this DocumentSignerTemplateConf.  # noqa: E501


        :return: The order of this DocumentSignerTemplateConf.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DocumentSignerTemplateConf.


        :param order: The order of this DocumentSignerTemplateConf.  # noqa: E501
        :type: int
        """
        if order is not None and order > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if order is not None and order < 0:  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._order = order

    @property
    def placeholders(self):
        """Gets the placeholders of this DocumentSignerTemplateConf.  # noqa: E501


        :return: The placeholders of this DocumentSignerTemplateConf.  # noqa: E501
        :rtype: list[Placeholder]
        """
        return self._placeholders

    @placeholders.setter
    def placeholders(self, placeholders):
        """Sets the placeholders of this DocumentSignerTemplateConf.


        :param placeholders: The placeholders of this DocumentSignerTemplateConf.  # noqa: E501
        :type: list[Placeholder]
        """

        self._placeholders = placeholders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentSignerTemplateConf, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentSignerTemplateConf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
