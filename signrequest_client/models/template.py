# coding: utf-8

"""
    SignRequest API

    API for SignRequest.com

    OpenAPI spec version: v1
    Contact: tech-support@signrequest.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signrequest_client.models.document_signer_template_conf import DocumentSignerTemplateConf  # noqa: F401,E501
from signrequest_client.models.document_team import DocumentTeam  # noqa: F401,E501
from signrequest_client.models.user import User  # noqa: F401,E501


class Template(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'name': 'str',
        'uuid': 'str',
        'user': 'User',
        'team': 'DocumentTeam',
        'who': 'str',
        'signers': 'list[DocumentSignerTemplateConf]'
    }

    attribute_map = {
        'url': 'url',
        'name': 'name',
        'uuid': 'uuid',
        'user': 'user',
        'team': 'team',
        'who': 'who',
        'signers': 'signers'
    }

    def __init__(self, url=None, name=None, uuid=None, user=None, team=None, who=None, signers=None):  # noqa: E501
        """Template - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._name = None
        self._uuid = None
        self._user = None
        self._team = None
        self._who = None
        self._signers = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if name is not None:
            self.name = name
        if uuid is not None:
            self.uuid = uuid
        if user is not None:
            self.user = user
        if team is not None:
            self.team = team
        if who is not None:
            self.who = who
        if signers is not None:
            self.signers = signers

    @property
    def url(self):
        """Gets the url of this Template.  # noqa: E501


        :return: The url of this Template.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Template.


        :param url: The url of this Template.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def name(self):
        """Gets the name of this Template.  # noqa: E501

        Defaults to filename  # noqa: E501

        :return: The name of this Template.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Template.

        Defaults to filename  # noqa: E501

        :param name: The name of this Template.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this Template.  # noqa: E501


        :return: The uuid of this Template.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Template.


        :param uuid: The uuid of this Template.  # noqa: E501
        :type: str
        """
        if uuid is not None and len(uuid) < 1:
            raise ValueError("Invalid value for `uuid`, length must be greater than or equal to `1`")  # noqa: E501

        self._uuid = uuid

    @property
    def user(self):
        """Gets the user of this Template.  # noqa: E501


        :return: The user of this Template.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Template.


        :param user: The user of this Template.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def team(self):
        """Gets the team of this Template.  # noqa: E501


        :return: The team of this Template.  # noqa: E501
        :rtype: DocumentTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Template.


        :param team: The team of this Template.  # noqa: E501
        :type: DocumentTeam
        """

        self._team = team

    @property
    def who(self):
        """Gets the who of this Template.  # noqa: E501

        `m`: only me, `mo`: me and others, `o`: only others  # noqa: E501

        :return: The who of this Template.  # noqa: E501
        :rtype: str
        """
        return self._who

    @who.setter
    def who(self, who):
        """Sets the who of this Template.

        `m`: only me, `mo`: me and others, `o`: only others  # noqa: E501

        :param who: The who of this Template.  # noqa: E501
        :type: str
        """
        allowed_values = ["m", "mo", "o"]  # noqa: E501
        if who not in allowed_values:
            raise ValueError(
                "Invalid value for `who` ({0}), must be one of {1}"  # noqa: E501
                .format(who, allowed_values)
            )

        self._who = who

    @property
    def signers(self):
        """Gets the signers of this Template.  # noqa: E501


        :return: The signers of this Template.  # noqa: E501
        :rtype: list[DocumentSignerTemplateConf]
        """
        return self._signers

    @signers.setter
    def signers(self, signers):
        """Sets the signers of this Template.


        :param signers: The signers of this Template.  # noqa: E501
        :type: list[DocumentSignerTemplateConf]
        """

        self._signers = signers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Template, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
