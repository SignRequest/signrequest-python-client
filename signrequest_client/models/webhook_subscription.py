# coding: utf-8

"""
    SignRequest API

    API for SignRequest.com

    OpenAPI spec version: v1
    Contact: tech-support@signrequest.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebhookSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'uuid': 'str',
        'name': 'str',
        'event_type': 'str',
        'callback_url': 'str',
        'integration': 'str',
        'created': 'datetime'
    }

    attribute_map = {
        'url': 'url',
        'uuid': 'uuid',
        'name': 'name',
        'event_type': 'event_type',
        'callback_url': 'callback_url',
        'integration': 'integration',
        'created': 'created'
    }

    def __init__(self, url=None, uuid=None, name=None, event_type=None, callback_url=None, integration=None, created=None):  # noqa: E501
        """WebhookSubscription - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._uuid = None
        self._name = None
        self._event_type = None
        self._callback_url = None
        self._integration = None
        self._created = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        self.event_type = event_type
        self.callback_url = callback_url
        if integration is not None:
            self.integration = integration
        if created is not None:
            self.created = created

    @property
    def url(self):
        """Gets the url of this WebhookSubscription.  # noqa: E501


        :return: The url of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookSubscription.


        :param url: The url of this WebhookSubscription.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def uuid(self):
        """Gets the uuid of this WebhookSubscription.  # noqa: E501


        :return: The uuid of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this WebhookSubscription.


        :param uuid: The uuid of this WebhookSubscription.  # noqa: E501
        :type: str
        """
        if uuid is not None and len(uuid) < 1:
            raise ValueError("Invalid value for `uuid`, length must be greater than or equal to `1`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this WebhookSubscription.  # noqa: E501

        Optional name to easily identify what webhook is used for  # noqa: E501

        :return: The name of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookSubscription.

        Optional name to easily identify what webhook is used for  # noqa: E501

        :param name: The name of this WebhookSubscription.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def event_type(self):
        """Gets the event_type of this WebhookSubscription.  # noqa: E501


        :return: The event_type of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this WebhookSubscription.


        :param event_type: The event_type of this WebhookSubscription.  # noqa: E501
        :type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["convert_error", "converted", "sending_error", "sent", "declined", "cancelled", "expired", "signed", "viewed", "downloaded", "signer_signed", "signer_email_bounced", "signer_viewed_email", "signer_viewed", "signer_forwarded", "signer_downloaded", "signrequest_received"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def callback_url(self):
        """Gets the callback_url of this WebhookSubscription.  # noqa: E501


        :return: The callback_url of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this WebhookSubscription.


        :param callback_url: The callback_url of this WebhookSubscription.  # noqa: E501
        :type: str
        """
        if callback_url is None:
            raise ValueError("Invalid value for `callback_url`, must not be `None`")  # noqa: E501
        if callback_url is not None and len(callback_url) > 2100:
            raise ValueError("Invalid value for `callback_url`, length must be less than or equal to `2100`")  # noqa: E501
        if callback_url is not None and len(callback_url) < 1:
            raise ValueError("Invalid value for `callback_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._callback_url = callback_url

    @property
    def integration(self):
        """Gets the integration of this WebhookSubscription.  # noqa: E501


        :return: The integration of this WebhookSubscription.  # noqa: E501
        :rtype: str
        """
        return self._integration

    @integration.setter
    def integration(self, integration):
        """Sets the integration of this WebhookSubscription.


        :param integration: The integration of this WebhookSubscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["mfiles", "salesforce", "formdesk", "zapier", "txhash"]  # noqa: E501
        if integration not in allowed_values:
            raise ValueError(
                "Invalid value for `integration` ({0}), must be one of {1}"  # noqa: E501
                .format(integration, allowed_values)
            )

        self._integration = integration

    @property
    def created(self):
        """Gets the created of this WebhookSubscription.  # noqa: E501


        :return: The created of this WebhookSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WebhookSubscription.


        :param created: The created of this WebhookSubscription.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
