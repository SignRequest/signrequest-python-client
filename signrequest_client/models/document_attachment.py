# coding: utf-8

"""
    SignRequest API

    API for SignRequest.com

    OpenAPI spec version: v1
    Contact: tech-support@signrequest.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentAttachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'uuid': 'str',
        'name': 'str',
        'file': 'str',
        'file_from_content': 'str',
        'file_from_content_name': 'str',
        'file_from_url': 'str',
        'document': 'str'
    }

    attribute_map = {
        'url': 'url',
        'uuid': 'uuid',
        'name': 'name',
        'file': 'file',
        'file_from_content': 'file_from_content',
        'file_from_content_name': 'file_from_content_name',
        'file_from_url': 'file_from_url',
        'document': 'document'
    }

    def __init__(self, url=None, uuid=None, name=None, file=None, file_from_content=None, file_from_content_name=None, file_from_url=None, document=None):  # noqa: E501
        """DocumentAttachment - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._uuid = None
        self._name = None
        self._file = None
        self._file_from_content = None
        self._file_from_content_name = None
        self._file_from_url = None
        self._document = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if file is not None:
            self.file = file
        if file_from_content is not None:
            self.file_from_content = file_from_content
        if file_from_content_name is not None:
            self.file_from_content_name = file_from_content_name
        if file_from_url is not None:
            self.file_from_url = file_from_url
        self.document = document

    @property
    def url(self):
        """Gets the url of this DocumentAttachment.  # noqa: E501


        :return: The url of this DocumentAttachment.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DocumentAttachment.


        :param url: The url of this DocumentAttachment.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def uuid(self):
        """Gets the uuid of this DocumentAttachment.  # noqa: E501


        :return: The uuid of this DocumentAttachment.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DocumentAttachment.


        :param uuid: The uuid of this DocumentAttachment.  # noqa: E501
        :type: str
        """
        if uuid is not None and len(uuid) < 1:
            raise ValueError("Invalid value for `uuid`, length must be greater than or equal to `1`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this DocumentAttachment.  # noqa: E501

        Defaults to filename, including extension  # noqa: E501

        :return: The name of this DocumentAttachment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentAttachment.

        Defaults to filename, including extension  # noqa: E501

        :param name: The name of this DocumentAttachment.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def file(self):
        """Gets the file of this DocumentAttachment.  # noqa: E501

        Temporary URL to document attachment, expires in five minutes  # noqa: E501

        :return: The file of this DocumentAttachment.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this DocumentAttachment.

        Temporary URL to document attachment, expires in five minutes  # noqa: E501

        :param file: The file of this DocumentAttachment.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def file_from_content(self):
        """Gets the file_from_content of this DocumentAttachment.  # noqa: E501

        Base64 encoded document content  # noqa: E501

        :return: The file_from_content of this DocumentAttachment.  # noqa: E501
        :rtype: str
        """
        return self._file_from_content

    @file_from_content.setter
    def file_from_content(self, file_from_content):
        """Sets the file_from_content of this DocumentAttachment.

        Base64 encoded document content  # noqa: E501

        :param file_from_content: The file_from_content of this DocumentAttachment.  # noqa: E501
        :type: str
        """

        self._file_from_content = file_from_content

    @property
    def file_from_content_name(self):
        """Gets the file_from_content_name of this DocumentAttachment.  # noqa: E501

        Filename, including extension. Required when using `file_from_content`.  # noqa: E501

        :return: The file_from_content_name of this DocumentAttachment.  # noqa: E501
        :rtype: str
        """
        return self._file_from_content_name

    @file_from_content_name.setter
    def file_from_content_name(self, file_from_content_name):
        """Sets the file_from_content_name of this DocumentAttachment.

        Filename, including extension. Required when using `file_from_content`.  # noqa: E501

        :param file_from_content_name: The file_from_content_name of this DocumentAttachment.  # noqa: E501
        :type: str
        """

        self._file_from_content_name = file_from_content_name

    @property
    def file_from_url(self):
        """Gets the file_from_url of this DocumentAttachment.  # noqa: E501

        Publicly accessible URL of document to be downloaded by SignRequest  # noqa: E501

        :return: The file_from_url of this DocumentAttachment.  # noqa: E501
        :rtype: str
        """
        return self._file_from_url

    @file_from_url.setter
    def file_from_url(self, file_from_url):
        """Sets the file_from_url of this DocumentAttachment.

        Publicly accessible URL of document to be downloaded by SignRequest  # noqa: E501

        :param file_from_url: The file_from_url of this DocumentAttachment.  # noqa: E501
        :type: str
        """
        if file_from_url is not None and len(file_from_url) > 2100:
            raise ValueError("Invalid value for `file_from_url`, length must be less than or equal to `2100`")  # noqa: E501

        self._file_from_url = file_from_url

    @property
    def document(self):
        """Gets the document of this DocumentAttachment.  # noqa: E501


        :return: The document of this DocumentAttachment.  # noqa: E501
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this DocumentAttachment.


        :param document: The document of this DocumentAttachment.  # noqa: E501
        :type: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")  # noqa: E501

        self._document = document

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentAttachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
