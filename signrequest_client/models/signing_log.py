# coding: utf-8

"""
    SignRequest API

    API for SignRequest.com

    OpenAPI spec version: v1
    Contact: tech-support@signrequest.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SigningLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pdf': 'str',
        'security_hash': 'str'
    }

    attribute_map = {
        'pdf': 'pdf',
        'security_hash': 'security_hash'
    }

    def __init__(self, pdf=None, security_hash=None):  # noqa: E501
        """SigningLog - a model defined in Swagger"""  # noqa: E501

        self._pdf = None
        self._security_hash = None
        self.discriminator = None

        if pdf is not None:
            self.pdf = pdf
        if security_hash is not None:
            self.security_hash = security_hash

    @property
    def pdf(self):
        """Gets the pdf of this SigningLog.  # noqa: E501

        Temporary URL to signing log, expires in five minutes  # noqa: E501

        :return: The pdf of this SigningLog.  # noqa: E501
        :rtype: str
        """
        return self._pdf

    @pdf.setter
    def pdf(self, pdf):
        """Sets the pdf of this SigningLog.

        Temporary URL to signing log, expires in five minutes  # noqa: E501

        :param pdf: The pdf of this SigningLog.  # noqa: E501
        :type: str
        """

        self._pdf = pdf

    @property
    def security_hash(self):
        """Gets the security_hash of this SigningLog.  # noqa: E501

        SHA256 hash of PDF contents  # noqa: E501

        :return: The security_hash of this SigningLog.  # noqa: E501
        :rtype: str
        """
        return self._security_hash

    @security_hash.setter
    def security_hash(self, security_hash):
        """Sets the security_hash of this SigningLog.

        SHA256 hash of PDF contents  # noqa: E501

        :param security_hash: The security_hash of this SigningLog.  # noqa: E501
        :type: str
        """
        if security_hash is not None and len(security_hash) < 1:
            raise ValueError("Invalid value for `security_hash`, length must be greater than or equal to `1`")  # noqa: E501

        self._security_hash = security_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SigningLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SigningLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
