# coding: utf-8

"""
    SignRequest API

    API for SignRequest.com

    OpenAPI spec version: v1
    Contact: tech-support@signrequest.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Placeholder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'type': 'str',
        'page_index': 'int',
        'prefill': 'bool',
        'text': 'str',
        'checkbox_value': 'bool',
        'date_value': 'date',
        'external_id': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'type': 'type',
        'page_index': 'page_index',
        'prefill': 'prefill',
        'text': 'text',
        'checkbox_value': 'checkbox_value',
        'date_value': 'date_value',
        'external_id': 'external_id'
    }

    def __init__(self, uuid=None, type=None, page_index=None, prefill=None, text=None, checkbox_value=None, date_value=None, external_id=None):  # noqa: E501
        """Placeholder - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._type = None
        self._page_index = None
        self._prefill = None
        self._text = None
        self._checkbox_value = None
        self._date_value = None
        self._external_id = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if type is not None:
            self.type = type
        self.page_index = page_index
        self.prefill = prefill
        if text is not None:
            self.text = text
        if checkbox_value is not None:
            self.checkbox_value = checkbox_value
        if date_value is not None:
            self.date_value = date_value
        if external_id is not None:
            self.external_id = external_id

    @property
    def uuid(self):
        """Gets the uuid of this Placeholder.  # noqa: E501


        :return: The uuid of this Placeholder.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Placeholder.


        :param uuid: The uuid of this Placeholder.  # noqa: E501
        :type: str
        """
        if uuid is not None and len(uuid) < 1:
            raise ValueError("Invalid value for `uuid`, length must be greater than or equal to `1`")  # noqa: E501

        self._uuid = uuid

    @property
    def type(self):
        """Gets the type of this Placeholder.  # noqa: E501


        :return: The type of this Placeholder.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Placeholder.


        :param type: The type of this Placeholder.  # noqa: E501
        :type: str
        """
        allowed_values = ["s", "i", "n", "d", "t", "c"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def page_index(self):
        """Gets the page_index of this Placeholder.  # noqa: E501


        :return: The page_index of this Placeholder.  # noqa: E501
        :rtype: int
        """
        return self._page_index

    @page_index.setter
    def page_index(self, page_index):
        """Sets the page_index of this Placeholder.


        :param page_index: The page_index of this Placeholder.  # noqa: E501
        :type: int
        """
        if page_index is None:
            raise ValueError("Invalid value for `page_index`, must not be `None`")  # noqa: E501

        self._page_index = page_index

    @property
    def prefill(self):
        """Gets the prefill of this Placeholder.  # noqa: E501


        :return: The prefill of this Placeholder.  # noqa: E501
        :rtype: bool
        """
        return self._prefill

    @prefill.setter
    def prefill(self, prefill):
        """Sets the prefill of this Placeholder.


        :param prefill: The prefill of this Placeholder.  # noqa: E501
        :type: bool
        """
        if prefill is None:
            raise ValueError("Invalid value for `prefill`, must not be `None`")  # noqa: E501

        self._prefill = prefill

    @property
    def text(self):
        """Gets the text of this Placeholder.  # noqa: E501


        :return: The text of this Placeholder.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Placeholder.


        :param text: The text of this Placeholder.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def checkbox_value(self):
        """Gets the checkbox_value of this Placeholder.  # noqa: E501


        :return: The checkbox_value of this Placeholder.  # noqa: E501
        :rtype: bool
        """
        return self._checkbox_value

    @checkbox_value.setter
    def checkbox_value(self, checkbox_value):
        """Sets the checkbox_value of this Placeholder.


        :param checkbox_value: The checkbox_value of this Placeholder.  # noqa: E501
        :type: bool
        """

        self._checkbox_value = checkbox_value

    @property
    def date_value(self):
        """Gets the date_value of this Placeholder.  # noqa: E501


        :return: The date_value of this Placeholder.  # noqa: E501
        :rtype: date
        """
        return self._date_value

    @date_value.setter
    def date_value(self, date_value):
        """Sets the date_value of this Placeholder.


        :param date_value: The date_value of this Placeholder.  # noqa: E501
        :type: date
        """

        self._date_value = date_value

    @property
    def external_id(self):
        """Gets the external_id of this Placeholder.  # noqa: E501


        :return: The external_id of this Placeholder.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Placeholder.


        :param external_id: The external_id of this Placeholder.  # noqa: E501
        :type: str
        """
        if external_id is not None and len(external_id) > 255:
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `255`")  # noqa: E501

        self._external_id = external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Placeholder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
